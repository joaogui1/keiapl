<html>
<head>
<title>Remembering Ken Iverson</title>
<link href="jdoc.css" rel=stylesheet>
</head>

<body>

<table width=520 align=center><tr><td>

<p><font size=+3>Remembering Ken Iverson</font><br>
<font size=+1>&nbsp; &nbsp;by  Roger Hui, November 2004</font></p>




<a name="acknowledgments"></a>
<br><p><font size=+1>Acknowledgments</font></p>

<p>I am indebted to Chris Burke, Eric Iverson, Eugene McDonnell, 
Donald McIntyre, Roland Pesch, Joey Tuttle, and Arthur Whitney
for reading earlier drafts of the paper.</p>




<a name="sec0"></a>
<br><p><font size=+2>0. Beginnings</font></p>

<p>I first met Ken Iverson early in 1981 in Toronto, when he invited me 
to dinner, along with Mrs. Jean Iverson, and Eugene McDonnell, Lib Gibson, 
David Keith, and Jane Minett of I.P. Sharp Associates.  
I believe the dinner happened because Eugene mentioned
me to Ken, mainly due to <i>The N Queens Problem</i> paper 
<acronym title="Hui, R.K.W., The N Queens Problem, APL Quote-Quad, Volume 11, Number 3, 1981-03.">[0]</acronym> 
I had submitted to the Recreational APL column that he wrote and edited.</p>

<a name="manulife"></a>
<p>So now not only was I to meet the great Ken Iverson,
inventor of APL, but I was also to get a free dinner.  
The latter was a consideration: at the time
I was a graduate student at the University of Toronto.
At the appointed hour I went up to Ken&rsquo;s apartment on the 
47th floor of the Manulife Center.
I was so in awe of the great man that I took scant notice of
the spectacular view&mdash;from the apartment one can see Niagara Falls,
a 90 minute drive away&mdash;until Ken directed me to do so.</p>

<a name="dinner"></a>
<p>We then went for dinner at a restaurant on King Street.
I don&rsquo;t remember much about the dinner,
except for the way Ken left the tip.  
The change came back from paying the dinner check, in the form of 
the dingiest looking bills you ever saw.  Ken took out his wallet, 
extracted some crisp clean bills, and crumbled them up before
leaving them on the tray.</p>

<a name="met"></a>
<p>In another sense, I had &ldquo;met&rdquo; Ken Iverson years before, 
when I learned APL during my undergraduate studies 
at the University of Alberta, from reading the 
<i>APL\360 User&rsquo;s Manual</i>
<acronym title="Falkoff, A.D., and K.E. Iverson, APL\360 User&rsquo;s Manual, IBM Corporation, 1968-08.">[1]</acronym>
and from working at the computer terminal.  
Since I did not have direct access to Ken,
I read his papers carefully, principally
<i>The Design of APL</i> 
<acronym title="Falkoff, A.D., and K.E. Iverson, 
The Design of APL, IBM Journal of Research and Development, 
Volume 17, Number 4, 1973-07.">[2]</acronym>,
<i>The Evolution of APL</i>
<acronym title="Falkoff, A.D., and K.E. Iverson, 
The Evolution of APL, ACM SIGPLAN Notices, 
Volume 13, Number 8, 1978-08.">[3]</acronym>, and
<i>Notation as a Tool of Thought</i> 
<acronym title="Iverson, K.E., Notation as a Tool of Thought, 
Communications of the ACM, Volume 23, Number 8, 1980-08.">[4]</acronym>.
I also further acquainted myself with APL 
during the summers of 1975 and 1976, 
when Lib Gibson hired me to work as a summer student 
at I.P. Sharp in Calgary.
</p>




<a name="sec1"></a>
<br><p><font size=+2>1. From APL to J</font></p>

<p>The late 70&rsquo;s and early 80&rsquo;s were an exciting time for APL.
APL was a commercial success. APL was taught in schools and
universities.  APL conferences were well-attended.
(I attended my first APL conference in 1979 in Rochester,
and my recollected impression
is that the parallel sessions at the conference each had audiences
of over a hundred.)
</p>

<a name="seminal"></a>
<p>Ken had published his seminal paper <i>Operators and Functions</i> 
<acronym title="Iverson, K.E., Operators and Functions, 
Research Report #RC7091, IBM Corporation, 1978-04-26.">[5]</acronym>
in April 1978.
He went from IBM to I.P. Sharp in Toronto in 1980,
and there collaborated with Arthur Whitney on 
<i>Practical Uses of a Model of APL</i> 
<acronym title="Iverson, K.E., and A.T. Whitney, 
Practical Uses of a Model of APL, 
APL82, APL Quote-Quad, Volume 13, Number 1, 1982-09.">[6]</acronym> 
in 1981-82, leading to <i>Rationalized APL</i> 
<acronym title="Iverson, K.E., Rationalized APL, 
I.P. Sharp Associates, 1983-01-06.">[7]</acronym>
in January 1983, multiple editions of 
<i>A Dictionary of the APL Language</i> between 1984 and 1987, 
and <i>A Dictionary of APL</i> 
<acronym title="Iverson, K.E., 
A Dictionary of APL, APL Quote-Quad, 
Volume 18, Number 1, 1987-09.">[8]</acronym>
in September 1987.  Within I.P. Sharp, 
the phrase &ldquo;dictionary APL&rdquo; came into use to denote the APL
specified by <i>A Dictionary of APL</i>, itself referred
to as &ldquo;the dictionary&rdquo;.</p>

<a name="vendors"></a>
<p>At that time, the main APL vendors were IBM, STSC, 
and I.P. Sharp, and all were active in developing and
extending the language.
IBM had APL2, based on the work of Trenchard More and Jim Brown
[<acronym title="Brown, J.A., A Generalization of APL, 
Ph.D. Thesis, Department of Computer and Information Sciences, 
Syracuse University, 1971.">9</acronym>, 
<acronym title="Brown, J.A., The Principles of APL2, 
Technical Report 03.247, IBM Santa Teresa Laboratory, 1984.">10</acronym>,  
<acronym title="APL2 Programming: Language Reference, 
SH20-9227, IBM Corporation, 1988.">11</acronym>].
Work on APL2 proceeded intermittently for 15 years 
<acronym title="Falkoff, A.D., The IBM Family of APL Systems, 
IBM Systems Journal, Volume 30, Number 4, 1991-12.">[12]</acronym>, 
with actual coding starting in 1971 and 
APL2 becoming available as an IUP in 1982.  
STSC had an experimental APL implementation called NARS 
<acronym title="Smith, R., Nested Arrays, Operators, and Functions, 
APL81, APL Quote-Quad, Volume 21, Number 1, 1981-09.">[13]</acronym>.
NARS and APL2 differed in fundamental respects 
from dictionary APL (and differed from each other). </p>

<a name="sharp"></a>
<p>I.P. Sharp implemented the new APL ideas in stages,
complex numbers, enclosed (boxed) arrays, match, and composition operators 
(on, over, under) in 1981 
[<acronym title="McDonnell, E.E., Complex Numbers, 
SHARP APL Technical Notes 40, I.P. Sharp Associates, 1981-06-20.">14</acronym>, 
<acronym title="Iverson, K.E., Composition and Enclosure, 
SHARP APL Technical Notes 41, I.P. Sharp Associates, 1981-06-20.">15</acronym>], 
determinant in 1982 
<acronym title="Iverson, K.E., 
Determinant-Like Functions Produced by the Dot-Operator, 
SHARP APL Technical Notes 42, I.P. Sharp Associates, 1982-04-01.">[16]</acronym>,
and the rank operator, lev (left), 
dex (right), and link in 1983 
<acronym title="Bernecky, R., K.E. Iverson, 
E.E. McDonnell, R.C. Metzger, and J.H. Schueler, 
Language Extensions of May 1983, SHARP APL Technical Notes 45, 
I.P. Sharp Associates, 1983-05-02.">[17]</acronym>.  
However, the domains of operators
were restricted to the primitive functions or subsets thereof. 
I.P. Sharp also had SHARP APL/HP 
<acronym title="Hodgkinson, R., APL Procedures, 
APL86, APL Quote-Quad, Volume 16, Number 4, 1986-07.">[18]</acronym>,
principally the work of Arthur Whitney with the
assistance of Rob Hodgkinson.</p>

<a name="sax0"></a>
<p>An important stepping stone from APL to J was SAX
<acronym title="Steinbrook, D.H., 
SAX Reference, I.P. Sharp Associates, 1986.">[19]</acronym>, 
SHARP APL/Unix, written in C and based on an implementation by STSC.
An alpha version of SAX became available within I.P. Sharp 
around December 1986 or early 1987. From that time to August 1989,
when the first J source line was written,
I had access to SAX, and in the later part of that period
used SAX on a daily basis.</p>

<a name="sax1"></a>
<p>SAX implemented dictionary APL in part,
and was upward-compatible with mainframe SHARP APL in order
to run applications ported from there.
It permitted derived or user-defined functions  
as arguments to operators, and
had the special APL characters, workspaces, and the
del-form function definition.  
However, it did not permit functions and operators to be named 
using the assignment arrow, as in the 
phrase<tt> sum</tt><font size=+1>&larr;</font><tt>+/ </tt>,
precluding what later came to be called tacit definition.
(The dictionary specified such assignment.)
It also did not have hooks and forks 
<acronym title="Iverson, K.E., and E.E. McDonnell, 
Phrasal Forms, APL89, APL Quote-Quad, 
Volume 19, Number 4, 1989-08.">[20]</acronym>, 
for those were not yet invented.
For Ken, an important drawback to SAX was that
it was not widely and freely available.
</p>

<a name="apl87"></a>
<p>From a personal perspective, 
another important stepping stone from APL to J was the writing
of my APL87 paper <i>Some Uses of { and }</i> 
<acronym title="Hui, R.K.W., Some Uses of { and }, 
APL87, APL Quote-Quad, Volume 17, Number 4, 1987-05.">[21]</acronym>.
At the time both Ken and I were working for I.P. Sharp 
in Toronto, and the ideas in the paper evolved over many
conversations with Ken.  Writing the paper refined and sharpened
my understanding of dictionary APL.</p>

<a name="atw"></a>
<p>Arthur Whitney, from collaborating with Ken on
<i>Practical Uses of a Model of APL</i> 
<acronym title="Iverson, K.E., and A.T. Whitney, 
Practical Uses of a Model of APL, APL82, APL Quote-Quad, 
Volume 13, Number 1, 1982-09.">[6]</acronym> 
in 1981-82,
inventing the rank operator while on the train ride to
the APL82 conference in Heidelberg in 1982 
[<acronym title="Whitney, A.T., private e-mail, 2004-11-11.">22</acronym>,
<acronym title="Pesch, R.H., private e-mail, 2004-11-11.">23</acronym>],
and implementing SHARP APL/HP in 1986 
<acronym title="Hodgkinson, R., APL Procedures, APL86, 
APL Quote-Quad, Volume 16, Number 4, 1986-07.">[18]</acronym>, 
went on to Morgan Stanley in 1988 and there invented A 
<acronym title="Whitney, A.T., A, plenary session, APL89, 1989-08.">[24]</acronym>.  
He later invented k 
<acronym title="Orth, D.L., K Reference Manual, Kx Systems, 1998.">[25]</acronym> 
in 1993 and q 
<acronym title="Whitney, A.T., Abridged Q Language Manual, Kx Systems, 2004.">[26]</acronym>
in 2003.
(Arthur is a classmate from the University of Alberta;
over the years our paths have crossed many times, 
and each time I had benefitted.
But that is a story for another time.) 
</p>

<a name="pc"></a>
<p>In the wider world, the PC revolution was in full swing.
It was now possible to have a computer (for example,
the <font size=-1>AT&amp;T 3B1 UNIX PC</font> or
the <font size=-1>IBM PC/AT</font>) at home that was 
a reasonable platform for developing an APL system.  
Not too long ago, such a platform would be under lock and key 
in a room with a raised floor,
inaccessible to mere mortals and not readily available
for experimentation.</p>

<p>The conditions were ripe for ... </p>




<a name="sec2"></a>
<br><p><font size=+2>2. J</font></p>

The story of how J began has been told in detail by Donald McIntyre 
<acronym title="McIntyre, D.B., A Tribute to Roger Hui, 
APL Quote-Quad, Volume 27, Number 1, 1996-09.">[27]</acronym>.  
Ken himself wrote in <i>A Personal View of APL</i> 
<acronym title="Iverson, K.E., A Personal View of APL, 
IBM Systems Journal, Volume 30, Number 4, 1991-12.">[28]</acronym>:

<blockquote>
<p>Work began in the summer of 1989 when I first discussed my desires
with Arthur Whitney. He proposed the use of C for implementation,
and produced (on one page and in one afternoon) 
a working fragment that provided only one function (+), 
one operator (/), one-letter names, 
and arrays limited to ranks 0 and 1, but did provide
for boxed arrays and for the use of the copula for assigning names
to any entity.</p>

<p>I showed this fragment to others in the hope of interesting someone
competent in both C and APL to take up the work, and soon recruited
Roger Hui, who was attracted in part by the unusual style of C
programming used by Arthur, a style that made heavy use of preprocessing
facilities to permit writing further C in a distinctly APL style.</p>

<p>Roger and I then began collaboration on the design and implementation
of a dialect of APL (later named J by Roger), first deciding to roughly
follow &ldquo;A Dictionary of APL&rdquo; and to impose no requirement of
compatibility with any existing dialect.  We were assisted by suggestions
from many sources, particularly in the design of the spelling scheme
(E.B. Iverson and A.T. Whitney) and in the treatment of cells, items,
and formatting (A.T. Whitney, based on his work on SHARP APL/HP and on
the dialect A reported at the APL89 conference in New York).</p>

<p>E.E. McDonnell of Reuters provided C programs for the
mathematical functions (which applied to complex numbers
as well as to real), D.L. Orth of IBM ported the system
to the IBM RISC System/6000 in time for the APL90 conference,
and L.J. Dickey of the University of Waterloo provided assistance
in porting the system to a number of other computers.</p>
</blockquote>

<a name="recruit"></a>
<p>It&rsquo;s funny, but my recollection is that at the time
I thought <i>I recruited Ken</i>.  Whoever recruited whom,
I won a great prize when Ken decided he and I should work together.</p>

<a name="impetus"></a>
<p>The final impetus that got J started was the
one-page interpreter fragment that Arthur wrote, 
recorded in Appendix A of <i>An Implementation of J</i>
<acronym title="Hui, R.K.W., 
An Implementation of J, Iverson Software Inc., 1992-01-27.">[29]</acronym> 
and also reproduced in <a href="#incunabulum">Appendix A</a> below.
My immediate reaction on seeing the page was recoil and puzzlement:
it looked nothing like any C code I had ever seen.  
(&ldquo;Is it even C?&rdquo;)
However, Ken counselled that I should reserve judgment.  
As recounted in <i>An Implementation of J</i>, 
it then happened that:</p>

<blockquote>
I studied this interpreter for about a week for its organization
and programming style; and on Sunday, August 27, 1989, at about
four o&rsquo;clock in the afternoon, wrote the first line of
code that became the implementation described in this document.
</blockquote>

<a name="jname"></a>
<p>The name &ldquo;J&rdquo; was chosen a few minutes later, 
when it became necessary to save the interpreter source file
for the first time.
</p>

<a name="parser"></a>
<p>I consciously designed and built the system
around &ldquo;Table 2: Parsing Process&rdquo; in 
<i>A Dictionary of APL</i> 
<acronym title="Iverson, K.E., A Dictionary of APL, 
APL Quote-Quad, Volume 18, Number 1, 1987-09.">[8]</acronym>, 
which I had studied carefully and modelled at least two different 
ways between 1986 and 1989.  
The C data and program structures were designed so that 
the parse table in C corresponded as directly as possible 
to the parse table in the dictionary.
I set as an objective of being able to show Ken 
the C source for the parser, and have him verify that
the syntax being implemented was correct.
We never did carry out the exercise (of Ken reading the C source), 
but I reckon I met my objective,
because eventually Ken replaced the table in the dictionary
with the parse table from the C source
<acronym title="Hui, R.K.W., and K.E. Iverson, 
J Introduction and Dictionary, Jsoftware Inc., 2004.">[30, section II E]</acronym>.
Other effects of trying to meet the objective were entirely beneficial.
</p>

<a name="apl87kei"></a>
<p>Years after the initial implementation, I happened to re-read
Ken&rsquo;s APL87 paper <i>APL87</i> 
<acronym title="Iverson, K.E., APL87, APL87, 
APL Quote-Quad, Volume 17, Number 4, 1987-05.">[31]</acronym>.  
In retrospect, the paper, in five pages,
prescribed all the essential steps in writing an APL interpreter, 
in particular the sections on word formation and parsing.</p>

<a name="fork0"></a>
<p>Ken and I had in mind to implement 
<i>A Dictionary of APL</i>
<acronym title="Iverson, K.E., A Dictionary of APL, 
APL Quote-Quad, Volume 18, Number 1, 1987-09.">[8]</acronym>
together with hooks and forks (phrasal forms) 
<acronym title="Iverson, K.E., and E.E. McDonnell, 
Phrasal Forms, APL89, APL Quote-Quad, Volume 19, Number 4, 1989-08.">[20]</acronym>.
For years, Ken had struggled to find a way
to write<tt> f+g </tt>as in calculus, 
from the &ldquo;scalar operators&rdquo; in <i>Operators and Functions</i> 
<acronym title="Iverson, K.E., Operators and Functions, 
Research Report #RC7091, IBM Corporation, 1978-04-26.">[5, section 4]</acronym>, 
through the &ldquo;til&rdquo; operator in 
<i>Practical Uses of a Model of APL</i>
<acronym title="Iverson, K.E., and A.T. Whitney, 
Practical Uses of a Model of APL, APL82, APL Quote-Quad, 
Volume 13, Number 1, 1982-09.">[6]</acronym> and
<i>Rationalized APL</i> 
<acronym title="Iverson, K.E., Rationalized APL, 
I.P. Sharp Associates, 1983-01-06.">[7, p. 18]</acronym>, 
and finally forks.
Forks are defined as follows:
<table>
<tr><td>&nbsp;</td><td><tt>&nbsp; (f g h) y&nbsp;</tt></td> <td><font size=+1>&harr;</font></td><td><tt>&nbsp;(f y) g (h y)</tt></td></tr>
<tr><td>&nbsp;</td><td><tt>x (f g h) y</tt></td>            <td><font size=+1>&harr;</font></td><td><tt>&nbsp;(x f y) g (x h y)</tt></td></tr>
</table>
Moreover,<tt> (f g p q r) </tt><font size=+1>&harr;</font><tt> (f g (p q r))</tt> .<tt> </tt>
Thus to write<tt> f+g </tt>as in calculus, one writes<tt> f+g </tt>in J.
Ken and Eugene McDonnell worked out the details 
on the long plane ride back from APL88 in Sydney, Australia,
with Ken coming up with the initial idea on waking up from a nap.</p>

<a name="fork1"></a>
<p>The choice to implement forks was fortuitous and fortunate.  
We realized only later
<acronym title="Hui, R.K.W., K.E. Iverson, and E.E. McDonnell, 
Tacit Definition, APL91, 
APL Quote-Quad, Volume 21, Number 4, 1991-08.">[32]</acronym> 
that forks made tacit expressions (operator expressions) complete
in the following sense:  
any sentence involving one or two arguments that 
did not use its arguments as an argument to an operator, 
can be written tacitly with fork and<tt> @: </tt>(compose)
and<tt> [ </tt>(left) and<tt> ] </tt>(right) and constant functions.
If<tt> @: </tt>were replaced by the equivalent special
fork<tt> [: f g</tt> ,<tt> </tt>then a sentence can be written
as an unbroken train (sequence of forks).
</p>

<a name="fork2"></a>
<p>Because explicit definition
(the analogue of del-form definitions in APL) was relatively complex,
it was not implemented until some months had elapsed.
As well, the restriction in APL that only nouns (arrays) can be assigned
never made it past the first day, for there was no way other than
by assignment to name verbs, adverbs, and conjunctions 
(functions and operators).
Therefore, for some months <i>all</i> verbs were tacit; 
that is, all functions were defined as operator expressions.
These circumstances forced us to explore tacit definition extensively.
</p>

<a name="fork3"></a>
<p>Meanwhile, Ken was concerned about the usefulness
of forks, and worked hard at finding examples of forks beyond those
in <i>Phrasal Forms</i> 
<acronym title="Iverson, K.E., and E.E. McDonnell, 
Phrasal Forms, APL89, APL Quote-Quad, Volume 19, Number 4, 1989-08.">[20]</acronym>.
After a while, it seemed that <i>everything</i> was a fork.
The explanation lies in the proof of completeness for tacit definition
<acronym title="Hui, R.K.W., K.E. Iverson, and E.E. McDonnell, 
Tacit Definition, APL91, APL Quote-Quad, Volume 21, Number 4, 1991-08.">[32]</acronym>:  
if the root (last) function 
in a sentence is applied dyadically, then a fork is required to write 
the sentence tacitly.  Since we wrote tacit definitions exclusively,
it was no wonder that we ran into forks constantly.
As well, we had little trouble expressing computations tacitly 
because of the completeness.
</p>

<a name="jsoftware"></a>
<p>Eric Iverson founded Iverson Software Inc. in February 1990
to provide an improved SHARP APL/PC product.  It quickly became
obvious that we had shared interests and goals, and in May 1990
Ken and I joined Iverson Software Inc.  The company soon
became J only.  The name was changed to Jsoftware Inc.
(<a href="http://www.jsoftware.com">www.jsoftware.com</a>) in April 2000.</p>

<a name="ebi"></a>
<a name="cdb"></a>
<p>Eric adapted the session manager from SHARP APL/PC 
for J in time for the first release.
Over the years, he was responsible for everything that was not 
the interpreter proper&mdash;the 
integrated development environment, the Windows interface,
and all other interfaces&mdash;and made  
contributions to the language itself, 
including locatives, control structures, and memory-mapped files.
Eric also handled product packaging and release details.
Chris Burke joined us in early 1994 and wrote the application libraries,
in particular the plot package, the debugger, the project manager, 
and the performance monitor.
</p>

<a name="firsts"></a>
<p>Work proceeded rapidly from August 1989.  The first public presentation
took place on 1990-02-26 when Ken and I gave a talk complete with
a live demo to the Toronto APLSIG at the Toronto Board of Trade.
The first release of the software was at APL90 
<acronym title="Hui, R.K.W., K.E. Iverson, 
E.E. McDonnell, and A.T. Whitney, APL\?, APL90, 
APL Quote-Quad, Volume 20, Number 4, 1990-07.">[33]</acronym> 
in Copenhagen in August 1990, 
when J was made available as shareware to the Software Exchange.  
(You can still get this version from various archives.)
The first J conference was held on 1996-06-24 to -25 at the
Koffler Institute of the University of Toronto.  There were 123 attendees
and 12 contributed papers in the proceedings
<acronym title="J User Conference Proceedings, 
Iverson Software Inc., 1996-06-24.">[34]</acronym>.
</p>

<br>

<a name="flexible"></a>
<p>In working with Ken, I soon realized that
Ken had a flexibility of mind that is breathtaking.
Two examples illustrate this point.
</p>

<a name="chars"></a>
<p>Example 0: For the first few months, 
the special APL characters and the <font size=-1>ASCII</font>
spelling co-existed in the system.  
It was Ken who first suggested that 
I should kill off the special APL characters.  
I myself resisted for a few weeks longer, 
until the situation became too confusing,
for reasons described in <i>J for the APL Programmer</i>
<acronym title="Burke, C., and R.K.W. Hui, 
J for the APL Programmer, APL Quote-Quad, 
Volume 27, Number 1, 1996-09.">[35, p. 11]</acronym>.</p>

<a name="scan"></a>
<p>Example 1: It came time to implement<tt> \</tt> (&ldquo;scan&rdquo;). 
On that day (in the first half of 1990), 
during lunch at Josie&rsquo;s Cafe on Yonge Street, I asked Ken innocently, 
&ldquo;Have you ever wanted to scan something other than reduction?&rdquo;
The question was not even well-formed, 
because the APL paradigm is so powerful
that it usually pushes aside alternative thoughts.
Nevertheless, the discussion that then proceeded 
was productive,
and quickly led to the realization that 
<acronym title="Burke, C. and R.K.W. Hui, 
J for the APL Programmer, APL Quote-Quad, 
Volume 27, Number 1, 1996-09.">[35, p. 16]</acronym>:</p>

<blockquote>
<p>Some APL expressions apply reduction implicitly.
For example, APL scan applies its left argument reduction
to successive prefixes of the right argument.
The use of reduction ensured that computations such as sum scan
can be effected by primitive function arguments to the operator,
and that the overall result could be assembled in APL\360.</p>

<p>With J&rsquo;s more permissive assembly rules 
(and the use of boxed arrays), 
reduction is no longer necessary, 
and in many cases, inappropriate.
Therefore in J, if a reduction is required, it must be
specified.  Thus<tt> +/\ </tt>in J computes <i>sum scan</i> 
and<tt> +/\. </tt>computes <i>suffix sum scan</i>.  
The following J example does not use reduction, 
and is therefore not readily expressed using APL scan:</p>

<pre>
   &lt;\ 'abcdef'
+-+--+---+----+-----+------+
|a|ab|abc|abcd|abcde|abcdef|
+-+--+---+----+-----+------+
</pre>
</blockquote>

<br>

<a name="special"></a>
<p>Much recent work involved &ldquo;recognizing&rdquo; phrases
and implementing them with special code.  
The expressive power
of tacit expressions makes this a fruitful approach.  For example,
if<tt> f </tt>is a primitive proposition, then:</p>

<table>
<tr><td><tt>f i. 0:</tt></td><td>&nbsp;&nbsp;&nbsp;</td>
 <td>first place where not<tt> x f y</tt></td><td></tr>
<tr><td><tt>f i. 1:</tt></td><td>&nbsp;</td>
 <td>first place where<tt> x f y </tt></td></tr>
<tr><td><tt>f i: 0:</tt></td><td>&nbsp;</td>
 <td>last place where not<tt> x f y </tt></td></tr>
<tr><td><tt>f i: 1:</tt></td><td>&nbsp;</td>
 <td>last place where<tt> x f y </tt></td></tr>
<tr><td><tt>+ /@:f</tt></td><td>&nbsp;</td>
 <td>number of places where<tt> x f y</tt></td></tr>
<tr><td><tt>+./@:f</tt></td><td>&nbsp;</td>
 <td><tt>x f y </tt>anywhere?</td></tr>
<tr><td><tt>*./@:f</tt></td><td>&nbsp;</td>
 <td><tt>x f y </tt>everywhere?</td></tr>
<tr><td><tt>I. @:f</tt></td><td>&nbsp;</td>
 <td>indices where<tt> x f y</tt></td></tr>
</table>

<a name="special1"></a>
<p>are supported by special code. 
A primitive proposition is one of the relational atomic verbs
(scalar functions)<tt> = ~: &lt; &lt;: &gt; &gt;: </tt>
or the verbs<tt> E. </tt>or<tt> e. </tt> 
(respectively, &ldquo;substring match&rdquo; and &ldquo;member of&rdquo;; 
a legend of the J words used in the text is available in
<a href="#jwords">Appendix B</a> below.)  For example:</p>

<pre>
   'boustrophedonic' (e.i.1:) 'aeiou'     NB. index of first vowel
1
   'boustrophedonic' (e.i:1:) 'aeiou'     NB. index of last  vowel
13
</pre>

<a name="special2"></a>
<p>If the target is found near the beginning of the search, 
the result is computed instantaneously
(and in time independent of the lengths of the arguments for 
atomic verbs<tt> f</tt>).
Even if the target is found only at the end of the search, 
the improvement in time is by a factor of two or more.
In either case the space used is constant 
for atomic verbs<tt> f</tt> .<tt> </tt>
</p>

<a name="j64"></a>
<p>Another recent development is a port to
the Linux and Windows XP 64-bit operating systems 
on the AMD64 and Intel EM64T processors
<acronym title="Iverson, E.B., J64 Beta Available, 
J Forum message, 2004-07-30.">[36]</acronym>. 
J64 has 64-bit integers and a 64-bit address space.</p>

<a name="a+s"></a>
<p>Ken had started to write a companion to the 
Abramowitz and Stegun classic,
<i>Handbook of Mathematical Functions</i>
<acronym title="Abramowitz, M., and I.A. Stegun, 
Handbook of Mathematical Functions, 
National Bureau of Standards, 1964-06.">[37]</acronym>.  
Such writing was the motivation behind the extended-precision integer
and rational number facilities;
to the same end,
extended-precision floating-point numbers will be also added.
The following examples illustrate extended-precision integers
and rational numbers:</p>

<pre>
   (+%)/\ 10 $ 1
1 2 1.5 1.66667 1.6 1.625 1.61538 1.61905 1.61765 1.61818
   (+%)/\ 10 $ 1x
1 2 3r2 5r3 8r5 13r8 21r13 34r21 55r34 89r55
   0j40 &quot;: (+%)/ 100 $ 1x
1.6180339887498948482045868343656381177203
</pre>
<p>The hook<tt> x(+%)y </tt>is<tt> x </tt>plus the reciprocal 
of<tt> y</tt> ,<tt> </tt>
and so<tt> (+%)/ </tt>is the continued fraction.  
The first phrase computes convergents to the golden ratio phi
in 64-bit <font size=-1>IEEE</font> floating-point numbers;
the second computes rational convergents to phi;
and the third computes phi to 40 decimal places.
</p>




<a name="sec3"></a>
<br><p><font size=+2>3. Remembering Ken</font></p>

<p>Ken and I worked on J in our homes in Toronto, 
I in my apartment in the High Park area and Ken
in his apartment on Erskine Avenue and subsequently
in the Manulife Center (a different apartment from the one in 1981,
with an even more spectacular view).  
The arrangement placed me uniquely under Ken&rsquo;s influence.
Oftentimes I found myself at Ken&rsquo;s house, delivering
the latest J version or working on a computer, 
and many times Ken would invite me to 
stay for lunch or dinner, explaining that &ldquo;thou shalt 
not muzzle the ox when he treadeth out the corn&rdquo;.
Little did I imagine in 1981 that the dinner 
I had with Ken and Jean then would be the first of many.
</p>

<a name="chess"></a>
<p>It is said that if you keep playing chess with a
grandmaster, your skills can not help but improve.
I had been in almost daily contact with
the master since late 1986, and the following are
a few of the things I have learned.</p>

<a name="credit"></a>
<p><b>Credit. </b>  When Ken was at Harvard a fellow student 
habitually stamped his papers &ldquo;Copyright&rdquo; 
or &ldquo;Confidential&rdquo;.
Howard Aiken, head of the Comp Lab and Ken&rsquo;s thesis supervisor,
advised, &ldquo;Don&rsquo;t worry about people
stealing your ideas.  If it&rsquo;s any good, you&rsquo;d
have to ram it down their throats!&rdquo;
(A less picturesque version of this story is found in 
<acronym title="Cohen, I.B., Howard Aiken: 
Portrait of a Computer Pioneer, MIT Press, 1999.">[38, p. 240]</acronym>.)
</p>

<a name="blame"></a>
<p><b>Blame. </b> Ken and I sometimes kidded each other 
about whose fault it was when something went wrong.
He complained in jest that I as implementor had 
the attitude of &ldquo;just tell me where to pour the concrete&rdquo;.
And I, in turn, complained in jest that he as designer
had the attitude that he was never to blame:  
If it&rsquo;s a mistake in the implementation, 
then it&rsquo;s obviously my fault;
and if it&rsquo;s a mistake in the design, 
well then I should have caught it during the implementation.</p>

<p>In truth, I am profoundly grateful to Ken for not complaining
in the times when I failed him, even when I failed him
the same way more than once.  I believe that if necessary, 
he would have forgiven me for seventy times seven times 
(although even I would probably catch on before too long).</p>

<a name="500"></a>
<p><b>Secret to Success. </b> In January 1992, 
I was in the final struggles of writing my book 
<i>An Implementation of J</i> 
<acronym title="Hui, R.K.W., 
An Implementation of J, Iverson Software Inc., 1992-01-27.">[29]</acronym>,
having difficulty and under time pressure.
Around that time, Ken was polishing off several
books and papers, seemingly effortlessly.  I asked
him what his secret was.  His reply was, basically, 
&ldquo;First, write 500 papers.&rdquo;</p>

<p>(Ken subsequently gave me some more immediately
useful advice about writing.)</p>

<a name="reading"></a>
<a name="writing"></a>
<p><b>Reading and Writing Carefully. </b>
In the early days I did not have direct access to Ken,
and therefore read his papers carefully.  Another example
is Arthur Whitney&rsquo;s 
<a href="#incunabulum">&ldquo;one page thing&rdquo;</a>, 
which was the final thing 
I studied (for one week) before writing the first line
of source code for J.
Over the years, I have benefitted enormously from 
such careful reading.</p>

<p>I later realized that Ken wrote carefully, 
in the expectation that what he wrote would be read carefully.
An exemplar of such writing is the description
of &ldquo;cut&rdquo; in <i>Rationalized APL</i> 
<acronym title="Iverson, K.E., Rationalized APL, 
I.P. Sharp Associates, 1983-01-06.">[7, p. 19-20]</acronym>.
It annoyed Ken to no end when accused of being &ldquo;too terse&rdquo;, 
for example as in &ldquo;the dictionary is too terse&rdquo;,
when &ldquo;terse&rdquo; means &ldquo;effectively concise&rdquo;.
</p>

<p><b>Words. </b> As others have recounted, 
Ken was deeply interested in words, their use and their etymology.  
He indeed did read the dictionary, and kept a copy of the 
American Heritage Dictionary 
<acronym title="The American Heritage Dictionary of the English Language, 
Third Edition, Houghton Mifflin Company, 1982.">[39]</acronym>
(along with other dictionaries)
by his easy chair for ready reference.  
He especially encouraged me to consult the section on Indo-European 
roots in the back of the AHD, 
which makes deep and uncommon connections between words.</p>

<p>Many of Ken&rsquo;s relatives and friends received
from him the AHD as a present.  I myself did not because 
I&rsquo;d already owned one years before I met Ken.  In fact,
<i>I</i> gave <i>him</i> the third edition of the AHD as a present.</p>

<p>I think nothing I had ever done impressed Ken quite as much as
when I found the word &ldquo;rhematic&rdquo; (meaning, pertaining to the
formation of words), a word he had been searching for for some time.  
Thus the phrase &ldquo;rhematic rules of J&rdquo; 
made its way into the J dictionary 
<acronym title="Hui, R.K.W., and K.E. Iverson, 
J Introduction and Dictionary, Jsoftware Inc., 2004.">[30]</acronym>.
</p>

<p><b>Books. </b>Before long, Ken and I discovered
that we shared a love of books.  
We often recommended reading material to each other.  
A sample of our recommendations:</p>

<p>I to Ken: <i>The Language Instinct</i>
by Steven Pinker; <i>Climbing Mount Improbable</i> by Richard Dawkins;
<i>Lincoln at Gettysburg</i> by Garry Wills.
Ken to me: <i>From Dawn to Decadence</i> by Jacques Barzun;
<a href="http://www.ucomics.com/calvinandhobbes"><i>Calvin and Hobbes</i></a>; 
<a href="http://www.nybooks.com"><i>The New York Review of Books</i></a>.</p>

<p>And, of course, both of us had read <i>The Book of J</i>
<acronym title="Bloom, H., and D. Rosenberg, 
The Book of J, Vantage Books, 1990.">[40]</acronym>.
</p>

<p><b>Politics. </b> Unsurprisingly, Ken stood up for what he believed in.  
He once spent a few hours in jail after being arrested during a protest 
against the Vietnam War.  In the same cell was Garry Wills, 
the historian and author.
</p>

<p><b>Respect for People. </b> Ken liked to tell
the story of the stoic service agent:
At an airport counter an irate traveller was berating
the service agent over something or other, which the
agent took with stoic forbearance.
After the traveller went on his way, 
the next person in line told the agent, &ldquo;I am amazed at
how well you took that abuse.&rdquo;  
The agent smiled thinly and replied,
&ldquo;Oh, the gentleman is flying to Chicago, 
but his luggage is going to Moscow.&rdquo;
</p>

<p>Ken also suggested, &ldquo;Be kind to someone trying to make
a living.&rdquo;  I try to remember this every time a taxi or
truck driver cuts me off on the road.</p>

<p><b>A Questioning and Flexible Mind. </b>
The flexibility of mind that Ken brought to his work (noted above)
was also demonstrated in his everyday life.  
For example, it astounded me how often and how thoroughly 
Ken rearranged the furniture in his home.  His explanation was, 
our needs have changed, and we rearranged our surroundings
to meet those needs.</p>



<a name="ref"></a><br>
<p><font size=+2>References</font></p>
<table>
<tr><td valign=top><a name="0"></a>[0]</td><td>&nbsp;</td><td>
Hui, R.K.W., 
<a href="http://www.jsoftware.com/jwiki/Doc/The%20N%20Queens%20Problem">
<i>The N Queens Problem</i></a>, APL Quote-Quad,
Volume 11, Number 3, 1981-03.</td></tr>

<tr><td valign=top><a name="1"></a>[1]</td><td>&nbsp;</td><td>
Falkoff, A.D., and K.E. Iverson, 
<a href="http://keiapl.org/archive/APL360_UsersMan_Aug1968.pdf">
<i>APL\360 User&rsquo;s Manual</i></a>, 
IBM Corporation, 1968-08.</td></tr>

<tr><td valign=top><a name="2"></a>[2]</td><td>&nbsp;</td><td>
Falkoff, A.D., and K.E. Iverson, 
<a href="http://www.jsoftware.com/papers/APLDesign.htm">
<i>The Design of APL</i></a>, 
IBM Journal of Research and Development, Volume 17, Number 4, 1973-07.</td></tr>

<tr><td valign=top><a name="3"></a>[3]</td><td>&nbsp;</td><td>
Falkoff, A.D., and K.E. Iverson, 
<a href="http://www.jsoftware.com/papers/APLEvol.htm">
<i>The Evolution of APL</i></a>,
ACM SIGPLAN Notices, Volume 13, Number 8, 1978-08.</td></tr>

<tr><td valign=top><a name="4"></a>[4]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/tot.htm">
<i>Notation as a Tool of Thought</i></a>, Communications
of the ACM, Volume 23, Number 8, 1980-08.</td></tr>

<tr><td valign=top><a name="5"></a>[5]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/opfns.htm">
<i>Operators and Functions</i></a>, Research Report #RC7091, 
IBM Corporation, 1978-04-26.</td></tr>

<tr><td valign=top><a name="6"></a>[6]</td><td>&nbsp;</td><td>
Iverson, K.E., and A.T. Whitney, 
<a href="http://www.jsoftware.com/papers/APLModel.htm">
<i>Practical Uses of a Model of APL</i></a>, 
APL82, APL Quote-Quad, Volume 13, Number 1, 1982-09.</td></tr>

<tr><td valign=top><a name="7"></a>[7]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/RationalizedAPL.htm">
<i>Rationalized APL</i></a>, I.P. Sharp Associates,
1983-01-06.</td></tr>

<tr><td valign=top><a name="8"></a>[8]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/APLDictionary.htm"><i>A Dictionary of APL</i></a>, 
APL Quote-Quad, Volume 18, Number 1, 1987-09.</td></tr>

<tr><td valign=top><a name="9"></a>[9]</td><td>&nbsp;</td><td>
Brown, J.A., <i>A Generalization of APL</i>, 
Ph.D. Thesis, Department of Computer and Information Sciences,
Syracuse University, 1971.</td></tr> 

<tr><td valign=top><a name="10"></a>[10]</td><td>&nbsp;</td><td>
Brown, J.A., <i>The Principles of APL2</i>, 
Technical Report 03.247, IBM Santa Teresa Laboratory, 1984.</td></tr> 

<tr><td valign=top><a name="11"></a>[11]</td><td>&nbsp;</td><td>
<i>APL2 Programming: Language Reference</i>, 
SH20-9227, IBM Corporation, 1988.</td></tr> 

<tr><td valign=top><a name="12"></a>[12]</td><td>&nbsp;</td><td>
Falkoff, A.D., <i>The IBM Family of APL Systems</i>, 
IBM Systems Journal, Volume 30, Number 4, 1991-12.</td></tr>

<tr><td valign=top><a name="13"></a>[13]</td><td>&nbsp;</td><td>
Smith, R., <i>Nested Arrays, Operators, and Functions</i>, 
APL81, APL Quote-Quad, Volume 21, Number 1, 1981-09.</td></tr>

<tr><td valign=top><a name="14"></a>[14]</td><td>&nbsp;</td><td>
McDonnell, E.E., 
<a href="http://www.jsoftware.com/papers/satn40.htm"><i>Complex Numbers</i></a>, 
SHARP APL Technical Notes 40, 
I.P. Sharp Associates, 1981-06-20.</td></tr>

<tr><td valign=top><a name="15"></a>[15]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/satn45.htm">
<i>Composition and Enclosure</i></a>, 
SHARP APL Technical Notes 41, 
I.P. Sharp Associates, 1981-06-20.</td></tr>

<tr><td valign=top><a name="16"></a>[16]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/satn42.htm">
<i>Determinant-Like Functions Produced by the Dot-Operator</i></a>, 
SHARP APL Technical Notes 42, 
I.P. Sharp Associates, 1982-04-01.</td></tr>

<tr><td valign=top><a name="17"></a>[17]</td><td>&nbsp;</td><td>
Bernecky, R., K.E. Iverson, E.E. McDonnell, R.C. Metzger, and J.H. Schueler, 
<a href="http://www.jsoftware.com/papers/satn45.htm">
<i>Language Extensions of May 1983</i></a>, SHARP APL Technical Notes 45, 
I.P. Sharp Associates, 1983-05-02.</td></tr>

<tr><td valign=top><a name="18"></a>[18]</td><td>&nbsp;</td><td>
Hodgkinson, R., <i>APL Procedures</i>, APL86, 
APL Quote-Quad, Volume 16, Number 4, 1986-07.</td></tr>

<tr><td valign=top><a name="19"></a>[19]</td><td>&nbsp;</td><td>
Steinbrook, D.H., <i>SAX Reference</i>, 
I.P. Sharp Associates, 1986.</td></tr>

<tr><td valign=top><a name="20"></a>[20]</td><td>&nbsp;</td><td>
Iverson, K.E., and E.E. McDonnell, 
<a href="http://www.jsoftware.com/papers/fork.htm"><i>Phrasal Forms</i></a>, 
APL89, APL Quote-Quad,
Volume 19, Number 4, 1989-08.</td></tr>

<tr><td valign=top><a name="21"></a>[21]</td><td>&nbsp;</td><td>
Hui, R.K.W., <i>Some Uses of { and }</i>, APL87, APL Quote-Quad,
Volume 17, Number 4, 1987-05.</td></tr>

<tr><td valign=top><a name="22"></a>[22]</td><td>&nbsp;</td><td>
Whitney, A.T., private e-mail, 2004-11-11.</td></tr>

<tr><td valign=top><a name="23"></a>[23]</td><td>&nbsp;</td><td>
Pesch, R.H., private e-mail, 2004-11-11.</td></tr>

<tr><td valign=top><a name="24"></a>[24]</td><td>&nbsp;</td><td>
Whitney, A.T., <i>A</i>, plenary session, APL89, 1989-08.</td></tr>

<tr><td valign=top><a name="25"></a>[25]</td><td>&nbsp;</td><td>
Orth, D.L., <i>K Reference Manual</i>, Kx Systems, 1998.</td></tr>

<tr><td valign=top><a name="26"></a>[26]</td><td>&nbsp;</td><td>
Whitney, A.T., <i>Abridged Q Language Manual</i>, 
Kx Systems, 2004.</td></tr>

<tr><td valign=top><a name="27"></a>[27]</td><td>&nbsp;</td><td>
McIntyre, D.B., <i>A Tribute to Roger Hui</i>, APL Quote-Quad,
Volume 27, Number 1, 1996-09.</td></tr> 

<tr><td valign=top><a name="28"></a>[28]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/APLPersonalView.htm"><i>A Personal View of APL</i></a>, 
IBM Systems Journal, Volume 30, Number 4, 1991-12.</td></tr>

<tr><td valign=top><a name="29">[29]</td><td>&nbsp;</td><td>
Hui, R.K.W., 
<a href="http://www.jsoftware.com/jwiki/Doc/An%20Implementation%20of%20J">
<i>An Implementation of J</i></a>, Iverson Software Inc., 
1992-01-27.</td></tr>
 
<tr><td valign=top><a name="30"></a>[30]</td><td>&nbsp;</td><td>
Hui, R.K.W., and K.E. Iverson, 
<a href="http://www.jsoftware.com/help/dictionary/contents.htm">
<i>J Introduction and Dictionary</i></a>, Jsoftware Inc., 2004.</td></tr>

<tr><td valign=top><a name="31"></a>[31]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a href="http://www.jsoftware.com/papers/APL87.htm"><i>APL87</i></a>, 
APL87, APL Quote-Quad,
Volume 17, Number 4, 1987-05.</td></tr>

<tr><td valign=top><a name="32"></a>[32]</td><td>&nbsp;</td><td>
Hui, R.K.W., K.E. Iverson, and E.E. McDonnell, <i>Tacit Definition</i>, 
APL91, APL Quote-Quad, Volume 21, Number 4, 1991-08.</td></tr>

<tr><td valign=top><a name="33"></a>[33]</td><td>&nbsp;</td><td>
Hui, R.K.W., K.E. Iverson, E.E. McDonnell, and A.T. Whitney,
<a href="http://www.jsoftware.com/papers/J1990.htm"><i>APL\?</i></a>, 
APL90, APL Quote-Quad, Volume 20, Number 4, 1990-07.</td></tr>

<tr><td valign=top><a name="34"></a>[34]</td><td>&nbsp;</td><td>
<i>J User Conference Proceedings</i>, Iverson Software Inc.,
1996-06-24.</td></tr>

<tr><td valign=top><a name="35"></a>[35]</td><td>&nbsp;</td><td>
Burke, C., and R.K.W. Hui, 
<a href="http://www.jsoftware.com/jwiki/Doc/J4APL">
<i>J for the APL Programmer</i></a>,
APL Quote-Quad, Volume 27, Number 1, 1996-09.</td></tr>

<tr><td valign=top><a name="36"></a>[36]</td><td>&nbsp;</td><td>
Iverson, E.B., 
<a href="http://www.jsoftware.com/pipermail/general/2004-July/017912.html">
<i>J64 Beta Available</i></a>,
J Forum message, 2004-07-30.</td></tr>

<tr><td valign=top><a name="37"></a>[37]</td><td>&nbsp;</td><td>
Abramowitz, M., and I.A. Stegun, 
<a href="http://www.math.sfu.ca/%7Ecbm/aands/">
<i>Handbook of Mathematical Functions</i></a>,
National Bureau of Standards, 1964-06.</td></tr>

<tr><td valign=top><a name="38"></a>[38]</td><td>&nbsp;</td><td>
Cohen, I.B., <i>Howard Aiken: Portrait of a Computer Pioneer</i>, MIT Press, 1999.</td></tr>

<tr><td valign=top><a name="39"></a>[39]</td><td>&nbsp;</td><td>
<i>The American Heritage Dictionary of the English Language</i>, 
Third Edition, Houghton Mifflin Company, 1982.</td></tr> 

<tr><td valign=top><a name="40"></a>[40]</td><td>&nbsp;</td><td>
Bloom, H., and D. Rosenberg, <i>The Book of J</i>, 
Vantage Books, 1990.</td></tr> 

</table>




<br><br><hr>

<a name="incunabulum"></a><br>
<p><font size=+2>Appendix A. Incunabulum</font></p>

<p>From <i>An Implementation of J</i> 
<acronym title="Hui, R.K.W., An Implementation of J, 
Iverson Software Inc., 1992-01-27.">[29]</acronym>, 
Appendix A: Incunabulum.</p>
 
<p>One summer weekend in 1989, Arthur Whitney visited Ken Iverson at
Kiln Farm and produced&mdash;on one page and in one 
afternoon&mdash;an interpreter fragment on the AT&T 3B1 computer.
I studied this interpreter for about a week for its organization
and programming style; and on Sunday, August 27, 1989, at about
four o&rsquo;clock in the afternoon, wrote the first line of
code that became the implementation described in this document.</p>

<p>Arthur&rsquo;s one-page interpreter fragment is as follows:</p>

<pre>
typedef char C;typedef long I;
typedef struct a{I t,r,d[3],p[2];}*A;
#define P printf
#define R return
#define V1(f) A f(w)A w;
#define V2(f) A f(a,w)A a,w;
#define DO(n,x) {I i=0,_n=(n);for(;i<_n;++i){x;}}
I *ma(n){R(I*)malloc(n*4);}mv(d,s,n)I *d,*s;{DO(n,d[i]=s[i]);}
tr(r,d)I *d;{I z=1;DO(r,z=z*d[i]);R z;}
A ga(t,r,d)I *d;{A z=(A)ma(5+tr(r,d));z->t=t,z->r=r,mv(z->d,d,r);
 R z;}
V1(iota){I n=*w->p;A z=ga(0,1,&n);DO(n,z->p[i]=i);R z;}
V2(plus){I r=w->r,*d=w->d,n=tr(r,d);A z=ga(0,r,d);
 DO(n,z->p[i]=a->p[i]+w->p[i]);R z;}
V2(from){I r=w->r-1,*d=w->d+1,n=tr(r,d);
 A z=ga(w->t,r,d);mv(z->p,w->p+(n**a->p),n);R z;}
V1(box){A z=ga(1,0,0);*z->p=(I)w;R z;}
V2(cat){I an=tr(a->r,a->d),wn=tr(w->r,w->d),n=an+wn;
 A z=ga(w->t,1,&n);mv(z->p,a->p,an);mv(z->p+an,w->p,wn);R z;}
V2(find){}
V2(rsh){I r=a->r?*a->d:1,n=tr(r,a->p),wn=tr(w->r,w->d);
 A z=ga(w->t,r,a->p);mv(z->p,w->p,wn=n>wn?wn:n);
 if(n-=wn)mv(z->p+wn,z->p,n);R z;}
V1(sha){A z=ga(0,1,&w->r);mv(z->p,w->d,w->r);R z;}
V1(id){R w;}V1(size){A z=ga(0,0,0);*z->p=w->r?*w->d:1;R z;}
pi(i){P("%d ",i);}nl(){P("\n");}
pr(w)A w;{I r=w->r,*d=w->d,n=tr(r,d);DO(r,pi(d[i]));nl();
 if(w->t)DO(n,P("< ");pr(w->p[i]))else DO(n,pi(w->p[i]));nl();}

C vt[]="+{~<#,";
A(*vd[])()={0,plus,from,find,0,rsh,cat},
 (*vm[])()={0,id,size,iota,box,sha,0};
I st[26]; qp(a){R  a>='a'&&a<='z';}qv(a){R a<'a';}
A ex(e)I *e;{I a=*e;
 if(qp(a)){if(e[1]=='=')R st[a-'a']=ex(e+2);a= st[ a-'a'];}
 R qv(a)?(*vm[a])(ex(e+1)):e[1]?(*vd[e[1]])(a,ex(e+2)):(A)a;}
noun(c){A z;if(c<'0'||c>'9')R 0;z=ga(0,0,0);*z->p=c-'0';R z;}
verb(c){I i=0;for(;vt[i];)if(vt[i++]==c)R i;R 0;}
I *wd(s)C *s;{I a,n=strlen(s),*e=ma(n+1);C c;
 DO(n,e[i]=(a=noun(c=s[i]))?a:(a=verb(c))?a:c);e[n]=0;R e;}

main(){C s[99];while(gets(s))pr(ex(wd(s)));}
</pre>

<br><hr>




<a name="jwords"></a><br>
<p><font size=+2>Appendix B. J Words Used in the Text</font></p>
 
<p>Full reference in <i>J Introduction and Dictionary</i>
<acronym title="Hui, R.K.W., and K.E. Iverson, 
J Introduction and Dictionary, Jsoftware Inc., 2004.">[30]</acronym>.</p>

<table>
<tr><td valign=top><table>
<tr><td><tt>=</tt></td><td>&nbsp;</td><td>equal</td></tr>
<tr><td><tt>&lt;</tt></td><td>&nbsp;</td><td>box &#149; less than</td></tr>
<tr><td><tt>&lt;:</tt></td><td>&nbsp;</td><td>less than or equal</td></tr>
<tr><td><tt>&gt;</tt></td><td>&nbsp;</td><td>greater than</td></tr>
<tr><td><tt>&gt;:</tt></td><td>&nbsp;</td><td>greater than or equal</td></tr>
<tr><td><tt>+</tt></td><td>&nbsp;</td><td>plus</td></tr>
<tr><td><tt>+.</tt></td><td>&nbsp;</td><td>or</td></tr>
<tr><td><tt>*.</tt></td><td>&nbsp;</td><td>and</td></tr>
<tr><td><tt>%</tt></td><td>&nbsp;</td><td>reciprocal</td></tr>
<tr><td><tt>$</tt></td><td>&nbsp;</td><td>reshape</td></tr>
<tr><td><tt>~:</tt></td><td>&nbsp;</td><td>not equal</td></tr>
<tr><td><tt>/</tt></td><td>&nbsp;</td><td>insert (reduce)</td></tr>
<tr><td><tt>\</tt></td><td>&nbsp;</td><td>prefix (scan)</td></tr>
<tr><td><tt>\.</tt></td><td>&nbsp;</td><td>suffix</td></tr>
</table></td>
<td width=88>&nbsp;</td>
<td valign=top><table>
<tr><td><tt>[</tt></td><td>&nbsp;</td><td>left (the left argument)</td></tr>
<tr><td><tt>[:</tt></td><td>&nbsp;</td><td>cap (special fork)</td></tr>
<tr><td><tt>]</tt></td><td>&nbsp;</td><td>right (the right argument)</td></tr>
<tr><td><tt>&quot;:</tt></td><td>&nbsp;</td><td>format (thorn)</td></tr>
<tr><td><tt>@:</tt></td><td>&nbsp;</td><td>at (compose)</td></tr>
<tr><td><tt>E.</tt></td><td>&nbsp;</td><td>member of interval (substring search mask)</td></tr>
<tr><td><tt>e.</tt></td><td>&nbsp;</td><td>member of</td></tr>
<tr><td><tt>I.</tt></td><td>&nbsp;</td><td>indices (from boolean)</td></tr>
<tr><td><tt>i.</tt></td><td>&nbsp;</td><td>index of</td></tr>
<tr><td><tt>i:</tt></td><td>&nbsp;</td><td>index of last</td></tr>
<tr><td><tt>0:</tt></td><td>&nbsp;</td><td>constant function 0</td></tr>
<tr><td><tt>1: </tt></td><td>&nbsp;</td><td>constant function 1</td></tr>
</table></td></tr>
</table>

</td></tr></table>

<br><hr>




<a name="photo"></a><br>
<table width=620 align=center>
<tr><td>
The last photograph of Ken Iverson, with Rachel Hui, Jean Iverson, and Nicholas Hui,
on Sunday, 2004-09-05, 
at the roof-top garden of the Manulife Center, 
Toronto, Canada.
[photo by Stella Hui]<br><br></td></tr>
<tr><td><img src="kei20040905.jpg" width=613 height=774></td></tr>
</table>


<br><br><br><br>
</body>
</html>
